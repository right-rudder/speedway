---
import CarouselCard from "./CarouselCard.astro";
import { carouselData } from "../data/carouselData.js";

const carouselId = "astro-carousel";
---
<div id={carouselId} class="relative w-full h-[75vh] mb-3" data-carousel="slide">
  <!-- Carousel wrapper -->
  <div class="relative h-full overflow-hidden rounded-lg">
    {carouselData.map((item, index) => (
      <div
        class={`absolute inset-0 transition-opacity duration-700 ease-in-out ${
          index === 0 ? "opacity-100 z-10" : "opacity-0 z-0"
        }`}
        data-carousel-item
      >
        <CarouselCard {...item} />
      </div>
    ))}
  </div>

  <!-- Slider indicators -->
  <div class="absolute z-30 flex -translate-x-1/2 bottom-5 left-1/2 space-x-3">
    {carouselData.map((_, index) => (
      <button
        type="button"
        class="w-3 h-3 rounded-full bg-black/30 dark:bg-gray-800/30"
        aria-label={`Slide ${index + 1}`}
        data-carousel-slide-to={index}
      ></button>
    ))}
  </div>

  <!-- Slider controls -->
  <button
    type="button"
    class="absolute top-0 left-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
    data-carousel-prev
  >
    <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-black/30 dark:bg-gray-800/30 group-hover:bg-black/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70">
      <svg
        class="w-4 h-4 text-accent-100 dark:text-gray-800 rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 1 1 5l4 4"
        />
      </svg>
      <span class="sr-only">Previous</span>
    </span>
  </button>
  <button
    type="button"
    class="absolute top-0 right-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
    data-carousel-next
  >
    <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-black/30 dark:bg-gray-800/30 group-hover:bg-black/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70">
      <svg
        class="w-4 h-4 text-accent-100 dark:text-gray-800 rtl:rotate-180"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 6 10"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="m1 9 4-4-4-4"
        />
      </svg>
      <span class="sr-only">Next</span>
    </span>
  </button>
</div>

<script>
  const carouselId = "astro-carousel";

  document.addEventListener("DOMContentLoaded", () => {
    const carousel = document.querySelector(`#${carouselId}`);
    const items = carousel.querySelectorAll("[data-carousel-item]");
    const totalItems = items.length;
    let currentIndex = 0;
    let autoplayInterval;

    const showItem = (index) => {
      items.forEach((item, i) => {
        item.classList.toggle("opacity-100", i === index);
        item.classList.toggle("opacity-0", i !== index);
        item.classList.toggle("z-10", i === index);
        item.classList.toggle("z-0", i !== index);
      });
    };

    const nextItem = () => {
      currentIndex = (currentIndex + 1) % totalItems;
      showItem(currentIndex);
    };

    const prevItem = () => {
      currentIndex = (currentIndex - 1 + totalItems) % totalItems;
      showItem(currentIndex);
    };

    const startAutoplay = () => {
      autoplayInterval = setInterval(nextItem, 10000);
    };

    const stopAutoplay = () => {
      clearInterval(autoplayInterval);
    };

    carousel
      .querySelector("[data-carousel-next]")
      .addEventListener("click", () => {
        stopAutoplay();  // Stop autoplay on user interaction
        nextItem();
        startAutoplay(); // Restart autoplay
      });

    carousel
      .querySelector("[data-carousel-prev]")
      .addEventListener("click", () => {
        stopAutoplay();  // Stop autoplay on user interaction
        prevItem();
        startAutoplay(); // Restart autoplay
      });

    carousel.querySelectorAll("[data-carousel-slide-to]").forEach((button) => {
      button.addEventListener("click", () => {
        stopAutoplay();  // Stop autoplay on user interaction
        currentIndex = Number(button.getAttribute("data-carousel-slide-to"));
        showItem(currentIndex);
        startAutoplay(); // Restart autoplay
      });
    });

    // Start the autoplay when the page loads
    startAutoplay();

    // Show the first item initially
    showItem(currentIndex);
  });
</script>
